import { bundle } from "./generic_helpers/bundle.js"
import nullifyEnvCode from "../autogenerated/bundles/nullifyEnv.binaryify.js"
import { FileSystem } from "https://deno.land/x/quickr@0.8.6/main/file_system.js"
import { parseArgs, flag, required, initialValue } from "https://esm.sh/gh/jeff-hykin/good-js@1.18.2.0/source/flattened/parse_args.js"
import { toCamelCase } from "https://esm.sh/gh/jeff-hykin/good-js@1.18.2.0/source/flattened/to_camel_case.js"
import { didYouMean } from "https://esm.sh/gh/jeff-hykin/good-js@1.18.2.0/source/flattened/did_you_mean.js"

// 
// check for help/version
// 
    const { help: showHelp, version: showVersion, } = parseArgs({
        rawArgs: Deno.args,
        fields: [
            [["--help", ], flag, ],
            [["--version"], flag, ],
        ],
    }).simplifiedNames
    import { Console, cyan, green, magenta, yellow } from "https://deno.land/x/quickr@0.8.6/main/console.js"
    const highlightHelp = (string)=>string.replace(
            // the [value]
            /(?<=\n    --(?:\w|-)+\s+)\[.+?\]/g, (match)=>`${magenta(match)}`
        ).replace(
            // the Notes:
            /\n\w+:/g, (match)=>`\n${yellow.bold(match)}`
        ).replace(
            // the --arg
            /\n    (--(?:\w|-)+)/g, (match)=>`    ${green(match)}`
        )
    if (showVersion) {
        console.log(`v0.1.0.0`)
        Deno.exit(0)
    }
    if (showHelp) {
        console.log(highlightHelp(`
            Usage:
                js-box --help
                js-box ./file.js --output ./file.deterministic.js
        `.replace(/\n            /g,"\n")))
        Deno.exit(0)
    }

// 
// normal usage
// 
    const output = parseArgs({
        rawArgs: Deno.args,
        fields: [
            [[ 0, "--input",], flag, ],
            [[ "--output",], flag, ],
            // [[1, "--deno-version"], initialValue(`${Deno.version.deno}`), ],
            // [["--no-default-args"], flag, ],
            // [["--add-arg"], initialValue([]), ],
            // [["--add-unix-arg"], initialValue([]), ],
            // [["--add-windows-arg"], initialValue([]), ],
        ],
        nameTransformer: toCamelCase,
        namedArgsStopper: "--",
        nameRepeats: "useLast",
        valueTransformer: JSON.parse,
        isolateArgsAfterStopper: false,
        argsByNameSatisfiesNumberedArg: true,
        implicitNamePattern: /^(--|-)[a-zA-Z0-9\-_]+$/,
        implictFlagPattern: null,
    })
    didYouMean({
        givenWords: Object.keys(output.implicitArgsByName).filter(each=>each.startsWith(`-`)),
        possibleWords: Object.keys(output.explicitArgsByName).filter(each=>each.startsWith(`-`)),
        autoThrow: true,
    })
    
    // console.debug(`output is:`,output)
    const {
        input,
        output,
    } = output.simplifiedNames
// 
// main
// 
    // start with the null env
    await FileSystem.write({path: output, data: "{\n"+nullifyEnvCode+"\n}\n", overwrite: true})
    await FileSystem.append({path: output, data: await bundle(input) })